
GramÃ¡tica BNF - Leeba

<program> := <global_vars> <declarations> 

<global_vars> :=  $\lambda$ | begin global : <var_declarations> end global;

<declarations> := <declaration> | <declaration> <declarations> 

<declaration> := begin <struct_declaration> 
                | begin <subprograms_declaration>       
                | begin <function_declaration> 

<var_declarations> := <var_declaration> ; | <var_declaration> ; <var_declarations>

<struct_declaration> := struct struct_id : <field_declarations> end struct_id;

<field_declarations> := <data_type> id; | <data_type> id; <field_declarations> 

<subprograms_declaration> := id ( <params> ): <statements> end id; 

<function_declaration> := <data_type> <subprograms_declaration>

<params> :=  $\lambda$ | <param> | <param> , <params> 

<param> := <data_type> id

<return> := return <expression> | <ref_ini>

<ref_ini> := ref <maybe_var>

<maybe_var> := <function_call> | <array_acess> | id<dot_acess>
  
<dot_acess> := $\lambda$ | .id <dot_acess>

<statements> := <statement> ; | <statement> ; <statements>

<statement> := <print>
            | newline
            | destroy id
            | <conditional>
            | <subprogram_call>
            | <array_modification>
            | <var_declaration>
            | <assignment>
            | <loop>
            | <return>

<array_modification> := id[<expression>]<subscript> = <expression>
                        | id[<expression>]<subscript> = <ref_ini>
                        | id[<expression>]<subscript> = read
                        | id[<expression>]<subscript> = create <data_type>

<array_acess> := id[<numeric_apression>]<subscript>

<subscript> := [<expression>] |  $\lambda $

<print>:= print(<expression>)

<subprogram_call> := id(<args>)

<args> := $\lambda $ | <ref_ini> | <ref_ini> , <args> | <expression> | <expression> , <args>

<casting> :=  (int) | (real) | (bool) | (string) | (char)

<expression> := <numeric_expression> | <logic_expression> 
              | <string_expression> | <casting> <expression>

<numeric_expression> := <term> <eval_remaining>

<eval_remaining> := + <term> <eval_remaining> | - <term> <eval_remaining>

<term> := <factor> * <term> | <factor> / <term> | <factor> % <term> | <factor>

<factor> := <literal> | <maybe_var> | - <factor> | (<numeric_expression>)

<logic_expression> := <logic_term>  or <logic_expression> | <logic_term1>

<logic_term1> := <logic_term2> and <logic_term1> | <logic_term2>
			
<logic_term2> := not <logic_factor> | <logic_factor>

<logic_factor> :=  <comparison>
                | bool_literal
                | <maybe_var>
                | (<logic_expression>)
                | NULL <maybe_var>

<comparison> := <expression> == <expression>
              | <expression> != <expression>
              | <numeric_expression> > <numeric_expression>
              | <numeric_expression> < <numeric_expression>
              | <numeric_expression> <= <numeric_expression>
              | <numeric_expression> >= <numeric_expression>

<string_expression> := <string_factor> + <string_expression> | <string_factor>

<string_factor> :=  string_literal | char_literal | <maybe_var>

<conditional> := begin if ( <logic_expression> ): <statements> end if
   	             | begin if ( <logic_expression> ): <statements> end if 
                   begin else: <statements> end else

<loop> := begin while (<logic_expression>): <statements> end while

<var_declaration> := <data_type> id
                    | <data_type> id = <expression>
                    | <data_type> id = <ref_ini>
                    | <data_type> id = read
                    | <data_type> id = create <data_type>

<assignment> := id<dot_acess> = <expression>
            | id<dot_acess> = <ref_ini>
            | id<dot_acess> = read
            | id<dot_acess> = create <data_type>

<data_type> := <type> 
            | id
            | constant <type>
            | constant id
            | ref <type>
            | ref id
            | <type>[integer_literal]
            | <type>[integer_literal][integer_literal]

<type> := int | real | bool | char | string

<literal> := <numeric_literal>  | char_literal | string_literal | bool_literal

<numeric_literal> := real_literal | integer_literal